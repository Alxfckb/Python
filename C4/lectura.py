import sys, pprint import argparsefrom math import *"""s=0for arg in sys.argv[1:]:    number = float(arg)    s += number    print('the sum is', s )s= sum([float(x) for x in sys.argv[1:]])print('the sum of %s is %s'%(' '.join(sys.argv[1:]) ,s))pprint.pprint(sys.argv[1:])i3= eval(sys.argv[1])print(type(i3),i3)def f(x):    return sin(x)*cos(3*x) + x**2formula=sys.argv[1]code = ''' def f(x):    return %s''' % formulaexec(code)def midpoint_integration(f, a, b, n=100):    h = (b - a)/float(n)    I=0    for i in range(n):        I += f(a + i*h + 0.5*h)    return h*If_formula = sys.argv[1] a = eval(sys.argv[2])b = eval(sys.argv[3]) if len(sys.argv) >= 5:    n = int(sys.argv[4])else:    n = 200    code= """#def g(x): #   return %s""" % f_formula exec(code)I = midpoint_integration(g, a, b, n)print ('Integral of %s on [%g, %g] with n=%d: %g' % \       (f_formula, a, b, n, I))             """    parser=argparse.ArgumentParser()parser.add_argument('--v0','--initial_velocity', type=float, default=0.0, help='initial velocity', metavar='v')args=parser.parse_args()                            